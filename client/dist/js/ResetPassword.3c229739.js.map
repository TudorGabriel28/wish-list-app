{"version":3,"sources":["webpack:///./src/views/ResetPassword.vue","webpack:///./src/views/ResetPassword.vue?001a","webpack:///./src/services/resetPasswordService.js"],"names":["setup","router","route","handleSubmit","passwordError","errorMessage","password","value","passwordConfirmationError","passwordConfirmation","updatePassword","resetPasswordService","validateResetPasswordToken","params","token","fire","icon","title","push","name","render","ResetPasswordService","email","apiClient","post","resetPasswordToken","passwords","put"],"mappings":"mKAAK,MAAM,0B,GAA8B,MAAM,kF,GAAsF,MAAM,oC,EAAmC,eAAuE,MAAnE,MAAM,WAAW,eAAa,SAAQ,4BAAwB,G,GAAiL,MAAM,MAAM,eAAa,iC,GAA6N,MAAM,MAAM,eAAa,yC,EAA2E,eAAkE,UAA1D,MAAM,cAAc,KAAK,UAAS,mBAAe,G,gDAApzB,eAAs1B,MAAt1B,EAAs1B,CAAlzB,eAA4yB,MAA5yB,EAA4yB,CAAhtB,eAA0sB,MAA1sB,EAA0sB,CAA5pB,EAAuE,eAA+kB,QAAxkB,SAAM,YAAlQ,kCAA4Q,sCAAc,e,gBAAE,eAAgI,SAAzH,MAAM,QAAQ,KAAK,WAAW,YAAY,eAA7U,qDAAqW,WAAQ,IAAE,eAAa,iC,mBAAvB,cAAuD,eAAqF,MAArF,EAAqF,eAArB,iBAAa,G,eAAQ,eAAiK,SAA1J,MAAM,iBAAiB,KAAK,WAAW,YAAY,mBAA3iB,qDAAukB,uBAAoB,IAAE,eAAa,yC,mBAAnC,0BAA2E,eAAyG,MAAzG,EAAyG,eAAjC,6BAAyB,GAAQ,G,mGAoB5uB,GACbA,MADa,WAEX,IAAMC,EAAS,iBACTC,EAAQ,iBACd,EAAyB,iBAAjBC,EAAR,EAAQA,aAER,EAAyD,eACvD,WAAY,QADQC,EAAtB,EAAQC,aAAoCC,EAA5C,EAAqCC,MAIrC,EAAiF,eAC/E,wBAAwB,SAASA,GAC/B,OAAGA,IAAUD,EAASC,OACb,iCAHSC,EAAtB,EAAQH,aAAgDI,EAAxD,EAAiDF,MAS3CG,EAAiBP,EAAY,yDAAC,WAAOG,GAAP,0GAE1BK,EAAA,KAAqBC,2BAA2BV,EAAMW,OAAOC,MAAOR,GAF1C,OAGhC,OAAMS,KAAK,CACTC,KAAM,UACNC,MAAO,qDAEThB,EAAOiB,KAAK,CACVC,KAAM,UARwB,mDAWhC,OAAMJ,KAAK,CACTC,KAAM,QACNC,MAAO,qBAEThB,EAAOiB,KAAK,CACVC,KAAM,UAhBwB,yDAAD,uDAsBnC,MAAO,CACLb,WACAF,gBACAK,uBACAD,4BACAE,oBC/DN,EAAOU,OAASA,EAED,gB,uICHTC,E,uKACJ,WAA+BC,GAA/B,iGACQC,OAAUC,KAAK,mBAAoBF,GAD3C,2C,2JAIA,WAAiCG,EAAoBC,GAArD,iGACQH,OAAUI,IAAV,0BAAiCF,GAAsBC,GAD/D,2C,mEAKWf,EAAuB,IAAIU","file":"js/ResetPassword.3c229739.js","sourcesContent":["<template lang=\"pug\">\n.row.align-items-center\n  .col-10.offset-1.col-sm-8.offset-sm-2.col-md-6.offset-md-3.col-xl-4.offset-xl-4\n    .center-container.mx-lg-5.mx-xl-0\n      h4.h4.title(data-test-id='title') Choose your new password\n      form(@submit.prevent='updatePassword')\n        input.input(type='password', placeholder='New password', v-model='password', data-test-id=\"reset-password-password-input\")\n        .red(data-test-id=\"reset-password-password-error\") {{passwordError}}\n        input.input.input-mt(type='password', placeholder='Confirm password', v-model='passwordConfirmation', data-test-id=\"reset-password-confirm-password-input\")\n        .red(data-test-id=\"reset-password-confirm-password-error\") {{passwordConfirmationError}}\n        button.button.mt-5(type='submit') Update Password\n</template>\n\n<script>\nimport { useRoute, useRouter } from 'vue-router'\nimport { useField, useForm } from 'vee-validate';\nimport {passwordValidation} from '../utils/validations'\nimport { resetPasswordService } from '@/services/resetPasswordService';\nimport { Toast } from '../utils/toastAlert';\n\nexport default {\n  setup() {\n    const router = useRouter();\n    const route = useRoute();\n    const { handleSubmit } = useForm();\n\n    const { errorMessage: passwordError, value: password } = useField(\n      'password', passwordValidation\n    );\n\n    const { errorMessage: passwordConfirmationError, value: passwordConfirmation } = useField(\n      'passwordConfirmation', function(value) {\n        if(value !== password.value) {\n          return 'Passwords are not the same.'\n        }\n        return true\n      }\n    );\n\n    const updatePassword = handleSubmit(async (password) => {\n      try {\n        await resetPasswordService.validateResetPasswordToken(route.params.token, password)\n        Toast.fire({\n          icon: 'success',\n          title: 'Password changed successfully. You can now login'\n        });\n        router.push({\n          name: 'Login'\n        });\n      } catch(error) {\n        Toast.fire({\n          icon: 'error',\n          title: 'Link has expired'\n        });\n        router.push({\n          name: 'Login'\n        });\n      }\n\n    })\n\n    return {\n      password,\n      passwordError,\n      passwordConfirmation,\n      passwordConfirmationError,\n      updatePassword\n    }\n  }\n};\n</script>\n\n\n","import { render } from \"./ResetPassword.vue?vue&type=template&id=2119a3a2&lang=pug\"\nimport script from \"./ResetPassword.vue?vue&type=script&lang=js\"\nexport * from \"./ResetPassword.vue?vue&type=script&lang=js\"\nscript.render = render\n\nexport default script","import { apiClient } from '@/utils/apiClient';\n\nclass ResetPasswordService {\n  async createResetPasswordToken(email) {\n    await apiClient.post('/reset-password/', email);\n  }\n\n  async validateResetPasswordToken(resetPasswordToken, passwords) {\n    await apiClient.put(`/reset-password/${resetPasswordToken}`, passwords);\n  }\n}\n\nexport const resetPasswordService = new ResetPasswordService();\n"],"sourceRoot":""}